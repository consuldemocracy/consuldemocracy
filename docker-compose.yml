services:
  # service configuration for our database
  database:

    # use the preferred version of the official Postgres image
    # see https://hub.docker.com/_/postgres/
    image: postgres:13.16
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    # persist the database between containers by storing it in a volume
    volumes:
      - db_data:/var/lib/postgresql/data

  # service configuration for our dockerized Rails app
  app:

    # use the Dockerfile next to this file
    build: .

    # rely on the RAILS_ENV value of the host machine
    # environment:
    #RAILS_ENV: $RAILS_ENV

    # makes the app container aware of the DB container
    depends_on:
      - database

    # expose the port we configured Unicorn to bind to
    ports:
      - "3000:3000"
    # To avoid masking gems and node modules installed in the image, keep these mounts commented out.
    # Uncomment only if you know you need them in your workflow.
    volumes:
      # Provide Rails master key to the container (read-only)
      - ./config/master.key:/var/www/consul/config/master.key:ro
      # Mount the full source tree (useful for live code edits in dev-only workflows)
      # - .:/var/www/consul
      # Persist Ruby gems on the host; WARNING: overrides image-bundled gems and can cause Bundler errors
      # - bundle:/usr/local/bundle
      # Persist node modules on the host; WARNING: overrides image-installed node modules
      # - node_modules:/var/www/consul/node_modules
    environment:
      - DB_HOST=database # Same name as the database service
      - PGUSER=postgres
      - PGPASSWORD=${PGPASSWORD-$POSTGRES_PASSWORD}
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - SECRET_KEY_BASE=${SECRET_KEY_BASE:-development_secret}
volumes:
  db_data: {}
  # bundle: {}
  # node_modules: {}
